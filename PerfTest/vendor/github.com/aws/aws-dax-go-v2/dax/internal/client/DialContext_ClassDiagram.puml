@startuml DialContext_ClassDiagram

package "cluster" #LightGreen {
	struct ClusterDaxClient {
		-config  : Config
		-cluster : cluster
	}

	struct Config {
		+MaxPendingConnectionsPerHost int
		+ClusterUpdateThreshold      : time.Duration
		+ClusterUpdateInterval       : time.Duration
		+IdleConnectionReapDelay     : time.Duration
		+ClientHealthCheckInterval   : time.Duration

		+Region      : string
		+HostPorts   : []string
		+Credentials : aws.CredentialsProvider
		+DialContext : func(context.Context, string, string) (net.Conn, error)
		+connConfig  : connConfig

		+SkipHostnameVerification : bool
		-logger                   : logging.Logger
		-logLevel                 : utils.LogLevelType

		+RouteManagerEnabled      : bool 
		+IpDiscovery              : utils.IpDiscovery

		-validate() error
		-validateConnConfig()
		+SetLogger(logger logging.Logger, logLevel utils.LogLevelType)
	}

	struct cluster {
		-lock           : sync.RWMutex
		'protected by lock
		-active         : map[hostPort]clientAndConfig 
		'protected by lock
		-routeManager   : RouteManager  
		'protected by lock               
		-closed         : bool
		'protected by lock                         
		-lastRefreshErr : error                        

		-lastUpdateNs : int64
		-executor     : *taskExecutor

		-seeds         : []hostPort
		-config        : Config
		-clientBuilder : clientBuilder
		+IpDiscovery   : utils.IpDiscovery

		-start() error 
		+Close() error
		-client(prev DaxAPI, op string) (DaxAPI, error)
		-safeRefresh(force bool)
		-lastRefreshError() error
		-refresh(force bool) error
		-filterAndSelectAddress(seedIPs []net.IP) ([]net.IP, error)
		-filterAndSelectEndpointAddress(endpoints []serviceEndpoint) ([]serviceEndpoint, error)
		-pullEndpoints() ([]serviceEndpoint, error)
		-pullEndpointsFrom(ip net.IP, port int) ([]serviceEndpoint, error)
		-newSingleClient(cfg serviceEndpoint) (DaxAPI, error)
	}

	interface clientBuilder {
		- newClient(net.IP, int, connConfig, string, aws.CredentialsProvider, int, dialContext, RouteListener) (DaxAPI, error)
	}

	struct singleClientBuilder {
		-newClient(net.IP, int, connConfig, string, aws.CredentialsProvider, int, dialContext, RouteListener) (DaxAPI, error) 
	}
}

ClusterDaxClient *-- Config : composition
ClusterDaxClient o-- cluster : aggregation
clientBuilder <|-- singleClientBuilder : implements
cluster -> clientBuilder : uses
cluster o-- singleClientBuilder : composition

@enduml